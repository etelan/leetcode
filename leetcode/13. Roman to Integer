import static java.util.Map.entry;    
import java.lang.Character;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

class Solution {
    public int romanToInt(String s) {
        
        
        Map<Character, Integer> romanCharPointsMap = Map.ofEntries(
            entry(new Character('I'), 1),
            entry(new Character('V'), 5),
            entry(new Character('X'), 10),
            entry(new Character('L'), 50),
            entry(new Character('C'), 100),
            entry(new Character('D'), 500),
            entry(new Character('M'), 1000)
        );
        
        Map<String, Integer> romanStrPointsMap = Map.ofEntries(
            entry("IV", 4),
            entry("IX", 9),
            entry("XL", 40),
            entry("XC", 90),
            entry("CD", 400),
            entry("CM", 900)
        );
        
        int total = 0;
        
        // For the multi ones first
        for (Map.Entry<String, Integer> entry : romanStrPointsMap.entrySet()) {         
            Long count = Pattern.compile(entry.getKey())
                .matcher(s)
                .results()
                .count();
            total += count * entry.getValue();
            s = s.replaceAll(entry.getKey(), "");
        }
        
        // For the single ones after
        for (int i = 0; i < s.length(); i++) {  
            total += romanCharPointsMap.get(s.charAt(i));
        }
        
        return total;
            
    }
}
